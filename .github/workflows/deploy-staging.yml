name: Deploy Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Prevent overlapping staging deploys
concurrency:
  group: staging-deploy
  cancel-in-progress: true

jobs:
  migrate-db:
    name: Run Prisma migrations (staging)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install only in the API workspace to avoid Husky/monorepo noise
      - name: Install (api)
        working-directory: ./apps/api
        env:
          HUSKY: "0" # skip git hooks during CI installs
        run: npm ci

      - name: Prisma generate (api)
        working-directory: ./apps/api
        run: npx prisma generate

      - name: Prisma migrate deploy (staging DB)
        working-directory: ./apps/api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STG }}
        run: npx prisma migrate deploy

  deploy-api:
    name: Deploy API to Render (staging)
    needs: migrate-db
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render deploy
        uses: render-examples/deploy-render@v1
        with:
          apiKey:   ${{ secrets.RENDER_API_KEY }}
          serviceId: ${{ secrets.RENDER_API_STG_SERVICE_ID }}

  deploy-web:
    name: Deploy Frontend to Vercel (staging project)
    needs: deploy-api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for commit SHA env only)
        uses: actions/checkout@v4

      - name: Vercel deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token:   ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id:  ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_STG }}
          # This publishes to the staging project's Production env
          vercel-args: '--prod'
          working-directory: ./apps/frontend
