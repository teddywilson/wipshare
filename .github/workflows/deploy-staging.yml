name: Deploy Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: staging-deploy
  cancel-in-progress: true

jobs:
  migrate-db:
    name: Prisma migrate (staging)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install (api only)
        working-directory: ./apps/api
        env:
          HUSKY: "0"
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./apps/api
        run: npx prisma generate

      - name: Apply migrations to staging
        working-directory: ./apps/api
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STG }}
        run: npx prisma migrate deploy

  deploy-api:
    name: Deploy API to Render (staging)
    needs: migrate-db
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render deploy
        id: trigger
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY_STG }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_STG }}
        run: |
          set -euo pipefail
          RESP=$(curl -fsS -X POST \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -d '{}')
          echo "$RESP"
          DEPLOY_ID=$(echo "$RESP" | jq -r '.id')
          if [ -z "$DEPLOY_ID" ] || [ "$DEPLOY_ID" = "null" ]; then
            echo "Failed to trigger deploy"; exit 1
          fi
          echo "deploy_id=$DEPLOY_ID" >> "$GITHUB_OUTPUT"

      - name: Wait for Render deploy to complete
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY_STG }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID_STG }}
          DEPLOY_ID: ${{ steps.trigger.outputs.deploy_id }}
        run: |
          set -euo pipefail
          TIMEOUT=$(( 15 * 60 ))
          INTERVAL=10
          ELAPSED=0
          while true; do
            RESP=$(curl -fsS \
              -H "Authorization: Bearer ${RENDER_API_KEY}" \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys/${DEPLOY_ID}")
            STATUS=$(echo "$RESP" | jq -r '.status')
            echo "Render status: $STATUS"
            case "$STATUS" in
              live|succeeded) exit 0 ;;
              failed|canceled|deactivated) echo "$RESP"; exit 1 ;;
            esac
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Timed out waiting for Render deploy"; exit 1
            fi
          done

  deploy-web:
    name: Deploy frontend to Vercel (staging)
    needs: deploy-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Vercel CLI
        run: npm i -g vercel@25

      - name: Write Vercel project config
        working-directory: ./apps/frontend
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STG }}
        run: |
          mkdir -p .vercel
          cat > .vercel/project.json <<EOF
          {
            "orgId": "${VERCEL_ORG_ID}",
            "projectId": "${VERCEL_PROJECT_ID}"
          }
          EOF
          cat .vercel/project.json

      - name: Deploy to Vercel (production env of staging project)
        working-directory: ./apps/frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          vercel deploy --prod --yes --token "$VERCEL_TOKEN"
